/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.towson;

import java.awt.BorderLayout;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.swing.JOptionPane;

/**
 *
 * @author williamsmith
 */
public class RegisterForCourse extends javax.swing.JPanel {

    private Model model = new Model();
    Model.ModelObserver mObserver = model.new ModelObserver();
    /**
     * Creates new form RegisterForCourse
     */
    public RegisterForCourse() {
        initComponents();
    }
    
    public RegisterForCourse(Model model) {
        super(new BorderLayout());
        this.model = model;
        model.addObserver(mObserver);
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        registerBtn = new javax.swing.JButton();
        mainMenuBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        enterIdNum = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        courseIdNum = new javax.swing.JTextField();

        registerBtn.setForeground(new java.awt.Color(206, 17, 38));
        registerBtn.setText("Register");
        registerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerBtnActionPerformed(evt);
            }
        });

        mainMenuBtn.setForeground(new java.awt.Color(206, 17, 38));
        mainMenuBtn.setText("Main Menu");
        mainMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMenuBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Register for a Course");

        jLabel2.setText("Enter student SSN");

        enterIdNum.setToolTipText("Enter student SSN");

        jLabel3.setText("Enter course ID#");

        courseIdNum.setToolTipText("Enter course ID#");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(mainMenuBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(registerBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(enterIdNum, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(courseIdNum))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2)
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel1))))
                        .addGap(0, 185, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterIdNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(courseIdNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 316, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registerBtn)
                    .addComponent(mainMenuBtn))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void registerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerBtnActionPerformed
        // TODO add your handling code here:
        //NAVYA: Do you have time to wire this up?
    	boolean cIdIsValid = checkCourseId();
        boolean sIdIsValid = checkStudentSsn();
        boolean regIsValid= checkRegisterd();
        boolean showErrorMsg = false;
        String errorMessage = "";
        
        String sql = "INSERT INTO ENROLLS(SSN, Course_Id) VALUES(?,?)";
        
        if (sIdIsValid == true && cIdIsValid == true && regIsValid == true){
		try (Connection conn = Main.connect(); PreparedStatement stmt = conn.prepareStatement(sql)) {
			stmt.setString(1, enterIdNum.getText());
			stmt.setString(2, courseIdNum.getText());
			stmt.executeUpdate();
			JOptionPane.showMessageDialog(null, "Successfully registered course");
			enterIdNum.setText("");
			courseIdNum.setText("");
		} catch (SQLException e) {

		}
        } else {
            if(cIdIsValid == false){
                errorMessage = errorMessage + "Please enter a valid course id\n";
                showErrorMsg = true;
            }
            if(sIdIsValid == false){
                errorMessage = errorMessage + "Please enter a valid SSN\n";
                showErrorMsg = true;
            }
            if(regIsValid == false){
                errorMessage = errorMessage + "Already registered for the course\n";
                showErrorMsg = true;
            }
        }
        if(showErrorMsg == true){
            JOptionPane.showMessageDialog(null, errorMessage);
        }
    	
    }//GEN-LAST:event_registerBtnActionPerformed
    
    private boolean checkCourseId() {
		boolean result = false;

		String sql = "SELECT * From COURSE WHERE Course_Id = ?";
		try (Connection conn = Main.connect(); PreparedStatement stmt = conn.prepareStatement(sql)) {
			stmt.setString(1, courseIdNum.getText());
			ResultSet rs = stmt.executeQuery();

			if (!rs.next()) {
				result = false;
			} else {
				result = true;
			}

		} catch (SQLException e) {

		}
		return result;

	}
    
    private boolean checkStudentSsn() {
		boolean result = false;

		String sql = "SELECT * From STUDENT WHERE SSN = ?";
		try (Connection conn = Main.connect(); PreparedStatement stmt = conn.prepareStatement(sql)) {
			stmt.setString(1, enterIdNum.getText());
			ResultSet rs = stmt.executeQuery();

			if (!rs.next()) {
				result = false;
			} else {
				result = true;
			}

		} catch (SQLException e) {

		}
		return result;

	}
    private boolean checkRegisterd() {
		boolean result = false;

		String sql = "SELECT * From ENROLLS WHERE SSN = ? AND Course_Id =?";
		try (Connection conn = Main.connect(); PreparedStatement stmt = conn.prepareStatement(sql)) {
			stmt.setString(1, enterIdNum.getText());
			stmt.setString(2, courseIdNum.getText());
			ResultSet rs = stmt.executeQuery();

			if (rs.next()) {
				result = false;
			} else {
				result = true;
			}

		} catch (SQLException e) {

		}
		return result;

	}

    private void mainMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainMenuBtnActionPerformed
        String cmd = evt.getActionCommand();
            if ("Main Menu".equals(cmd)) {
                model.returnToMainMenu();
            }
    }//GEN-LAST:event_mainMenuBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField courseIdNum;
    private javax.swing.JTextField enterIdNum;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton mainMenuBtn;
    private javax.swing.JButton registerBtn;
    // End of variables declaration//GEN-END:variables
}
